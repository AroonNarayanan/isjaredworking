{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","isWorking","showResult","dateString","upDate","bind","computeAvailability","knownDate","Date","this","getTime","setState","alert","e","target","value","Grid","id","verticalAlign","centered","Column","Header","as","textAlign","Form","size","Segment","raised","Field","fluid","onChange","type","FormButton","onClick","Message","color","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b840f6ee.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Form, FormButton, Grid, Header, Message, Segment } from 'semantic-ui-react';\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {isWorking: false, showResult: false, dateString: ''};\n        this.upDate = this.upDate.bind(this);\n        this.computeAvailability = this.computeAvailability.bind(this);\n    }\n\n    computeAvailability() {\n        try {\n            const knownDate = new Date('2020-01-16');\n            const inputDate = new Date(this.state.dateString);\n            const milisecondDifference = inputDate.getTime() - knownDate.getTime();\n            const dayDifference = milisecondDifference / (1000 * 60 * 60 * 24);\n            const isWorking = dayDifference % 3 === 0;\n            this.setState({\n                showResult: true,\n                isWorking: isWorking\n            });\n        } catch {\n            alert('Unable to check date. Please try again.');\n        }\n    }\n\n    upDate(e) {\n        this.setState({\n            dateString: e.target.value\n        });\n    }\n\n    render() {\n        return (\n            <Grid id=\"appGrid\" verticalAlign=\"middle\" centered>\n                <Grid.Column>\n                    <Header as=\"h1\" textAlign=\"center\">Is Jared Working?</Header>\n                    <Form size=\"large\">\n                        <Segment raised>\n                            <Form.Field fluid>\n                                <label>Date</label>\n                                <input onChange={this.upDate} type=\"date\"/>\n                            </Form.Field>\n                            <FormButton onClick={this.computeAvailability} fluid>Check Date</FormButton>\n                        </Segment>\n                    </Form>\n                    {this.state.showResult ? <Message color={this.state.isWorking ? \"red\" : \"green\"}>\n                        <Message.Header>{this.state.isWorking ? 'Yes' : 'No'}</Message.Header>\n                        {`Jared is ${this.state.isWorking ? '' : 'not'} working`}\n                    </Message> : null}\n                </Grid.Column>\n            </Grid>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}